{
    "1": {
        "problemNumber": 1,
        "problemVersion": 1,
        "description": "State Variables and its default value.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "getUint()",
                "callData": [],
                "expectReturn": [
                    0
                ]
            },
            {
                "methodName": "getBool()",
                "callData": [],
                "expectReturn": [
                    false
                ]
            },
            {
                "methodName": "getAddress()",
                "callData": [],
                "expectReturn": [
                    "0x0000000000000000000000000000000000000000"
                ]
            },
            {
                "methodName": "getString()",
                "callData": [],
                "expectReturn": [
                    ""
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/1"
    },
    "2": {
        "problemNumber": 2,
        "problemVersion": 1,
        "description": "Functions! View functions do only readings of the state on blockchain, and pure functions do no readings.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "addNumWithX(uint256)",
                "callData": [
                    1000
                ],
                "expectReturn": [
                    1001
                ]
            },
            {
                "methodName": "addTwoNum(uint256,uint256)",
                "callData": [
                    20,
                    64
                ],
                "expectReturn": [
                    84
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/2"
    },
    "3": {
        "problemNumber": 3,
        "problemVersion": 1,
        "description": "If Else! as simple as it is in other language.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "biggerThanTen(uint256)",
                "callData": [
                    2
                ],
                "expectReturn": [
                    false
                ]
            },
            {
                "methodName": "biggerThanTen(uint256)",
                "callData": [
                    10
                ],
                "expectReturn": [
                    false
                ]
            },
            {
                "methodName": "biggerThanTen(uint256)",
                "callData": [
                    15
                ],
                "expectReturn": [
                    true
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/3"
    },
    "4": {
        "problemNumber": 4,
        "problemVersion": 1,
        "description": "Mapping! This is how we record balance.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "setBalanceOf(address,uint256)",
                "callData": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac",
                    10
                ],
                "expectReturn": []
            },
            {
                "methodName": "setAddressOwnNFT(address,uint256)",
                "callData": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac",
                    1
                ],
                "expectReturn": []
            },
            {
                "methodName": "getBalanceOf(address)",
                "callData": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac"
                ],
                "expectReturn": [
                    10
                ]
            },
            {
                "methodName": "getAddressOwnNum(address,uint256)",
                "callData": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac",
                    1
                ],
                "expectReturn": [
                    true
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/4"
    },
    "5": {
        "problemNumber": 5,
        "problemVersion": 1,
        "description": "Modifier! Use modifier to modify functions with repeated steps.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "changeOwner(address)",
                "callData": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getOwner()",
                "callData": [],
                "expectReturn": [
                    "0xf8601B6E1f265De57a691Ff64Ddc5e5f2cad17Ac"
                ]
            },
            {
                "methodName": "%changeOwner(address)",
                "callData": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B"
                ],
                "expectReturn": [
                    "Caller is not owner"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/5"
    },
    "6": {
        "problemNumber": 6,
        "problemVersion": 1,
        "description": "Fallback and Receive, get your ethers with no reasons, good job.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "$",
                "callData": [
                    "100000000000",
                    [
                        "0x2098ddd01d6035049de112333af26442bb3009ea06b6df66fccfadf8adee9914"
                    ]
                ],
                "expectReturn": []
            },
            {
                "methodName": "#Log(string,uint256)",
                "callData": [],
                "expectReturn": [
                    [],
                    [
                        "fallback",
                        100000000000
                    ]
                ]
            },
            {
                "methodName": "$",
                "callData": [
                    "100000000000",
                    []
                ],
                "expectReturn": []
            },
            {
                "methodName": "#Log(string,uint256)",
                "callData": [],
                "expectReturn": [
                    [],
                    [
                        "recieve",
                        100000000000
                    ]
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/6"
    },
    "7": {
        "problemNumber": 7,
        "problemVersion": 1,
        "description": "Function Overload ! Your functions can have the same name with different inputs.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "add(uint256,uint256)",
                "callData": [
                    20,
                    40
                ],
                "expectReturn": [
                    60
                ]
            },
            {
                "methodName": "add(uint256,uint256,uint256)",
                "callData": [
                    20,
                    40,
                    60
                ],
                "expectReturn": [
                    120
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/7"
    },
    "8": {
        "problemNumber": 8,
        "problemVersion": 1,
        "description": "Assert, Require, Revert ! Do something to prevent bad things from happening.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "%testAssert",
                "callData": [],
                "expectReturn": [
                    "assert"
                ]
            },
            {
                "methodName": "%testRequire",
                "callData": [],
                "expectReturn": [
                    "Required"
                ]
            },
            {
                "methodName": "%testRevert",
                "callData": [],
                "expectReturn": [
                    "Reverted"
                ]
            },
            {
                "methodName": "addNumByOne()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "%testRequire",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "%testRevert",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "%testAssert",
                "callData": [],
                "expectReturn": []
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/8"
    },
    "9": {
        "problemNumber": 9,
        "problemVersion": 1,
        "description": "Deploy another contract ! Use your contract to deploy a contract.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "checkAns()",
                "callData": [],
                "expectReturn": [
                    true
                ]
            }
        ],
        "image": "ipfs://<ipfsPrefix>/9"
    },
    "10": {
        "problemNumber": 10,
        "problemVersion": 1,
        "description": "Interface ! Call other functions with interface.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "setCalled()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "checkAns()",
                "callData": [],
                "expectReturn": [
                    true
                ]
            }
        ],
        "image": "ipfs://<ipfsPrefix>/10"
    },
    "11": {
        "problemNumber": 11,
        "problemVersion": 1,
        "description": "Send ETH ! Send ETH to another contract using call.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "$",
                "callData": [
                    60000,
                    []
                ],
                "expectReturn": []
            },
            {
                "methodName": "sendETHtoCalled()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "checkAns()",
                "callData": [],
                "expectReturn": [
                    50000
                ]
            }
        ],
        "image": "ipfs://<ipfsPrefix>/11"
    },
    "12": {
        "problemNumber": 12,
        "problemVersion": 1,
        "description": "Call ! Call other contracts functions by using call.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "$",
                "callData": [
                    60000,
                    []
                ],
                "expectReturn": []
            },
            {
                "methodName": "deployContract()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "callSetGreet(string)",
                "callData": [
                    "hello"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getGreet()",
                "callData": [],
                "expectReturn": [
                    "hello"
                ]
            }
        ],
        "image": "ipfs://<ipfsPrefix>/12"
    },
    "13": {
        "problemNumber": 13,
        "problemVersion": 1,
        "description": "Struct ! Define your own type.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "createFood(string,uint256)",
                "callData": [
                    "pineapple",
                    100
                ],
                "expectReturn": []
            },
            {
                "methodName": "checkAns()",
                "callData": [],
                "expectReturn": [
                    "pineapple",
                    100
                ]
            }
        ],
        "image": "ipfs://<ipfsPrefix>/13"
    },
    "14": {
        "problemNumber": 14,
        "problemVersion": 1,
        "description": "Creat Event and emit it!",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "emitCalling(address,uint256,bool,string)",
                "callData": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B",
                    7,
                    "true",
                    "Hello World!"
                ],
                "expectReturn": []
            },
            {
                "methodName": "#Calling(address,uint256,bool,string,string)",
                "callData": [],
                "expectReturn": [
                    [
                        "0xdCca4cE55773359E191110Eeb21E0413f770032B",
                        7,
                        "true"
                    ],
                    [
                        "Hello World!",
                        "Meow"
                    ]
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/14"
    },
    "15": {
        "problemNumber": 15,
        "problemVersion": 1,
        "description": "Use Constructor to initialize your contract.",
        "constructorCallData": [
            [
                "address",
                "0xdCca4cE55773359E191110Eeb21E0413f770032B"
            ],
            [
                "uint256",
                321
            ]
        ],
        "problemSolution": [
            {
                "methodName": "getOwner()",
                "callData": [],
                "expectReturn": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B"
                ]
            },
            {
                "methodName": "getFoo()",
                "callData": [],
                "expectReturn": [
                    321
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/15"
    },
    "16": {
        "problemNumber": 16,
        "problemVersion": 1,
        "description": "ERC20 ! Build ERC20 -PART 1.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "balanceOf(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    100
                ]
            },
            {
                "methodName": "transfer(address,uint256)",
                "callData": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B",
                    10
                ],
                "expectReturn": []
            },
            {
                "methodName": "balanceOf(address)",
                "callData": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B"
                ],
                "expectReturn": [
                    10
                ]
            },
            {
                "methodName": "balanceOf(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    90
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Token"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/16"
    },
    "17": {
        "problemNumber": 17,
        "problemVersion": 1,
        "description": "ERC20 ! Build ERC20 -PART 2.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "approve",
                "callData": [
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B",
                    10
                ],
                "expectReturn": []
            },
            {
                "methodName": "allowance(address,address)",
                "callData": [
                    "MSG_SENDER",
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B"
                ],
                "expectReturn": [
                    10
                ]
            },
            {
                "methodName": "transferFrom(address,address,uint256)",
                "callData": [
                    "MSG_SENDER",
                    "0xdCca4cE55773359E191110Eeb21E0413f770032B",
                    10
                ],
                "expectReturn": []
            },
            {
                "methodName": "balanceOf(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    90
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Token"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/17"
    },
    "21": {
        "problemNumber": 21,
        "problemVersion": 1,
        "description": "Change Values of Global Variables",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "changeValue(address,uint256,uint128,int32,int8,bool,bytes1)",
                "callData": [
                    "0x90A1ad9E7c86590Fb8eD813bA7f93a6799fBF8b7",
                    "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                    "340282366920938463463374607431768211455",
                    "2147483647",
                    "127",
                    "true",
                    "0x12"
                ],
                "expectReturn": []
            },
            {
                "methodName": "get_a()",
                "callData": [],
                "expectReturn": [
                    "0x90A1ad9E7c86590Fb8eD813bA7f93a6799fBF8b7"
                ]
            },
            {
                "methodName": "get_b()",
                "callData": [],
                "expectReturn": [
                    "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                ]
            },
            {
                "methodName": "get_c()",
                "callData": [],
                "expectReturn": [
                    "340282366920938463463374607431768211455"
                ]
            },
            {
                "methodName": "get_d()",
                "callData": [],
                "expectReturn": [
                    "2147483647"
                ]
            },
            {
                "methodName": "get_e()",
                "callData": [],
                "expectReturn": [
                    "127"
                ]
            },
            {
                "methodName": "get_f()",
                "callData": [],
                "expectReturn": [
                    "true"
                ]
            },
            {
                "methodName": "get_g()",
                "callData": [],
                "expectReturn": [
                    "0x12"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/21"
    },
    "22": {
        "problemNumber": 22,
        "problemVersion": 1,
        "description": "Immutable and Constant",
        "constructorCallData": [
            [
                "address",
                "0x90A1ad9E7c86590Fb8eD813bA7f93a6799fBF8b7"
            ]
        ],
        "problemSolution": [
            {
                "methodName": "get_CALLER_1()",
                "callData": [],
                "expectReturn": "0x90A1ad9E7c86590Fb8eD813bA7f93a6799fBF8b7"
            },
            {
                "methodName": "get_CALLER_2()",
                "callData": [],
                "expectReturn": "0x0000000000000000000000000000000000000000"
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/22"
    },
    "23": {
        "problemNumber": 23,
        "problemVersion": 1,
        "description": "Hash In Order",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "hashInOrder()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "get_result",
                "callData": [],
                "expectReturn": [
                    "0x0c9abc34bde31d70a3c9d76141f5d4a79113efa5cf807a4e0bd01ef60ef4d573"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/23"
    },
    "24": {
        "problemNumber": 24,
        "problemVersion": 1,
        "description": "Inheritance",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "greeting()",
                "callData": [],
                "expectReturn": [
                    "Hello, My Name is Coco"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/24"
    },
    "25": {
        "problemNumber": 25,
        "problemVersion": 1,
        "description": "Inheritance and Override",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "returnGreeting(string)",
                "callData": [
                    "Suprise! I'm back!"
                ],
                "expectReturn": [
                    "Suprise! I'm back!"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/25"
    },
    "26": {
        "problemNumber": 26,
        "problemVersion": 1,
        "description": "Inheritance and Override the state variable",
        "constructorCallData": [
            [
                "string",
                "Jackson"
            ]
        ],
        "problemSolution": [
            {
                "methodName": "getName()",
                "callData": [],
                "expectReturn": [
                    "Hi, my name is Jackson"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 1
            },
            {
                "trait_type": "class",
                "value": "Beginner"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/26"
    },
    "41": {
        "problemNumber": 41,
        "problemVersion": 1,
        "description": "Signature && EIP-1271",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "VerifySignature(address,uint256,uint256,address,uint8,uint256,bytes)",
                "callData": [
                    "0xDEcf23CbB14972F2e9f91Ce30515ee955a124Cba",
                    "997",
                    "1673070083",
                    "0xB42faBF7BCAE8bc5E368716B568a6f8Fdf3F84ec",
                    "0",
                    "0",
                    "0xf48090ed731d9b3c956b9ee9843fd96d845879fc22763be659f2fb6f8229b52c245e72e3fb3540e969970333d52fa307b80cb3a04d088364f26c527c4767cb681b"
                ],
                "expectReturn": "true"
            },
            {
                "methodName": "VerifySignature(address,uint256,uint256,address,uint8,uint256,bytes)",
                "callData": [
                    "0xDEcf23CbB14972F2e9f91Ce30515ee955a124Cba",
                    "999",
                    "1673070083",
                    "0xB42faBF7BCAE8bc5E368716B568a6f8Fdf3F84ec",
                    "1",
                    "0",
                    "0xf48090ed731d9b3c956b9ee9843fd96d845879fc22763be659f2fb6f8229b52c245e72e3fb3540e969970333d52fa307b80cb3a04d088364f26c527c4767cb681b"
                ],
                "expectReturn": "false"
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "Company"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/41"
    },
    "42": {
        "problemNumber": 42,
        "problemVersion": 1,
        "description": "SupportsInterface (ERC-165) & RoyaltyInfo (ERC-2981)",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "%royaltyInfo(uint256)",
                "callData": [
                    "90"
                ],
                "expectReturn": [
                    "MSG_SENDER",
                    "9"
                ]
            },
            {
                "methodName": "supportsInterface(bytes4)",
                "callData": [
                    "0x2a55205a"
                ],
                "expectReturn": [
                    "false"
                ]
            },
            {
                "methodName": "_registerInterface(bytes4)",
                "callData": [
                    "0x2a55205a"
                ],
                "expectReturn": []
            },
            {
                "methodName": "supportsInterface(bytes4)",
                "callData": [
                    "0x2a55205a"
                ],
                "expectReturn": [
                    "true"
                ]
            },
            {
                "methodName": "royaltyInfo(uint256)",
                "callData": [
                    "90"
                ],
                "expectReturn": [
                    "MSG_SENDER",
                    "9"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "Company"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/42"
    },
    "47": {
        "problemNumber": 47,
        "problemVersion": 1,
        "description": "Advanced Withdraw with Function Polymorphism & Function Overloading.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "$",
                "callData": [
                    "400000000000",
                    []
                ],
                "expectReturn": []
            },
            {
                "methodName": "getNowStake()",
                "callData": [],
                "expectReturn": [
                    "400000000000"
                ]
            },
            {
                "methodName": "$deposit(address)",
                "callData": [
                    "600000000000",
                    [
                        "MSG_SENDER"
                    ]
                ],
                "expectReturn": []
            },
            {
                "methodName": "getNowStake()",
                "callData": [],
                "expectReturn": [
                    "1000000000000"
                ]
            },
            {
                "methodName": "withdraw(uint256)",
                "callData": [
                    "600000000000"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getNowStake()",
                "callData": [],
                "expectReturn": [
                    "400000000000"
                ]
            },
            {
                "methodName": "withdraw(uint256,address)",
                "callData": [
                    "400000000000",
                    "MSG_SENDER"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getNowStake()",
                "callData": [],
                "expectReturn": [
                    "0"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "Company"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/47"
    },
    "48": {
        "problemNumber": 48,
        "problemVersion": 1,
        "description": "Merkle Proof in the Solidity is a famous pattern.",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "verify(bytes32[],bytes32,bytes32)",
                "callData": [
                    [
                        "0x2098ddd01d6035049de112333af26442bb3009ea06b6df66fccfadf8adee9914",
                        "0xb4435d3d2bb4863bffe2dd7c4a217641efe9da99b177cef8693fe26910a2bf04",
                        "0x7c8d8e6486e95d2eaff942ec8eb9b732d53596cb06548b62ff4841438a25a5d4"
                    ],
                    "0xe2de7e936cd2e3b398a5b5b89726a8d72148b93050d271cf91ffec3cc5598577",
                    "0x760785a457f46af4582b62962c4d96be98c68df9619556fa20af3c286343bf81"
                ],
                "expectReturn": "true"
            },
            {
                "methodName": "verify(bytes32[],bytes32,bytes32)",
                "callData": [
                    [
                        "0x2098ddd01d6035049de112333af26442bb3009ea06b6df66fccfadf8adee9915",
                        "0xb4435d3d2bb4863bffe2dd7c4a217641efe9da99b177cef8693fe26910a2bf05",
                        "0x7c8d8e6486e95d2eaff942ec8eb9b732d53596cb06548b62ff4841438a25a5d5"
                    ],
                    "0xe2de7e936cd2e3b398a5b5b89726a8d72148b93050d271cf91ffec3cc5598575",
                    "0x760785a457f46af4582b62962c4d96be98c68df9619556fa20af3c286343bf85"
                ],
                "expectReturn": "false"
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "DSA"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/48"
    },
    "49": {
        "problemNumber": 49,
        "problemVersion": 1,
        "description": "Simple Staking DeFi Protocol",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "approveDAITransferFrom(uint256)",
                "callData": [
                    "100"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getAllowance()",
                "callData": [],
                "expectReturn": [
                    "100"
                ]
            },
            {
                "methodName": "approveDAITransferFrom(uint256)",
                "callData": [
                    "100"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getAllowance()",
                "callData": [],
                "expectReturn": [
                    "200"
                ]
            },
            {
                "methodName": "stakeTokens(uint256)",
                "callData": [
                    "100"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getClientStakingBalance(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    "100"
                ]
            },
            {
                "methodName": "unstakeTokens()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "getClientStakingBalance(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    "0"
                ]
            },
            {
                "methodName": "stakeTokens(uint256)",
                "callData": [
                    "100"
                ],
                "expectReturn": []
            },
            {
                "methodName": "getClientStakingBalance(address)",
                "callData": [
                    "MSG_SENDER"
                ],
                "expectReturn": [
                    "100"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "DeFi"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/49"
    },
    "64": {
        "problemNumber": 64,
        "problemVersion": 1,
        "description": "Prime",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "areThesePrime(uint256[])",
                "callData": [
                    [
                        3,
                        5,
                        7,
                        9,
                        49,
                        35,
                        67,
                        103,
                        109
                    ]
                ],
                "expectReturn": [
                    [
                        "true",
                        "true",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        "true"
                    ]
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 2
            },
            {
                "trait_type": "class",
                "value": "DSA"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/64"
    },
    "92": {
        "problemNumber": 92,
        "problemVersion": 1,
        "description": "Gnosis - MultiSigWallet",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            },
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            },
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 3
            },
            {
                "trait_type": "class",
                "value": "Company"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/92"
    },
    "95": {
        "problemNumber": 95,
        "problemVersion": 1,
        "description": "Floating Point Division",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "division(uint256,uint256,uint256)",
                "callData": [
                    "3",
                    "20",
                    "3"
                ],
                "expectReturn": [
                    "6",
                    "667",
                    "6.667"
                ]
            },
            {
                "methodName": "division(uint256,uint256,uint256)",
                "callData": [
                    "2",
                    "34",
                    "33"
                ],
                "expectReturn": [
                    "1",
                    "3",
                    "1.03"
                ]
            },
            {
                "methodName": "division(uint256,uint256,uint256)",
                "callData": [
                    "6",
                    "194",
                    "97"
                ],
                "expectReturn": [
                    "2",
                    "0",
                    "2.000000"
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 3
            },
            {
                "trait_type": "class",
                "value": "DSA"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/95"
    },
    "96": {
        "problemNumber": 96,
        "problemVersion": 1,
        "description": "Sparse Merkle Tree",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "compute(bytes32[],uint8,uint256,bytes32)",
                "callData": [
                    [],
                    "0",
                    "0",
                    "0"
                ],
                "expectReturn": [
                    "0"
                ]
            },
            {
                "methodName": "validate(bytes32[],uint8,uint256,bytes32,bytes32)",
                "callData": [
                    [],
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                "expectReturn": [
                    "true"
                ]
            },
            {
                "methodName": "()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "()",
                "callData": [],
                "expectReturn": []
            },
            {
                "methodName": "()",
                "callData": [],
                "expectReturn": []
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 3
            },
            {
                "trait_type": "class",
                "value": "DSA"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/96"
    },
    "97": {
        "problemNumber": 97,
        "problemVersion": 1,
        "description": "Send Message to Layer2 Optimism Contract",
        "constructorCallData": [],
        "problemSolution": [
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            },
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            },
            {
                "methodName": "()",
                "callData": [
                    ""
                ],
                "expectReturn": [
                    ""
                ]
            }
        ],
        "attributes": [
            {
                "trait_type": "difficulty",
                "value": 3
            },
            {
                "trait_type": "class",
                "value": "Scalability"
            }
        ],
        "image": "ipfs://<ipfsPrefix>/97"
    }
}