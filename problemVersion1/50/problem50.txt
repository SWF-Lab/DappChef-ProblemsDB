// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

// Ref: https://solidity-by-example.org/app/english-auction/

// This is an English auction contract!
// An English Auction, also referred to as an open cry ascending auction, starts by an auctioneer announcing the suggested opening bid or reserve price for the item on sale. The buyers with interest in the item start placing bids on the item on sale, with the auctioneer accepting higher bids as they come. 
contract answer50 {
    event Start();
    event Bid(address indexed bidder, uint256 amount);
    event Withdraw(address indexed bidder, uint256 amount);
    event End(address winner, uint256 amount);

    address payable public seller;
    uint256 public nowTime;
    uint256 public endTime;
    bool public started;
    bool public ended;

    address public winner;
    uint256 public highestBid = 1000;
    mapping(address => uint256) public bids;

    constructor() {
      seller = payable(msg.sender);
    }

    function start() external {
        //TODO 1: require not started and revert with error "started",
        //        require that only `seller` can call start


        started = true;
        nowTime = 0;
        // This is only for judgement, we mock the time using `nowTime`, in real case you have to use `block.timestamp`
        endTime = nowTime + 10;

        emit Start();
    }

    function bid() external payable {
        require(started, "The auction had not started");
        require(nowTime < endTime, "The auction had ended");

        // TODO 2: declare an uint256 named `newBid` and calculate a bidders new bid with msg.value. 
        // You should check if the new bid is biger that the current winner, 
        // if not, revert with message "lower than the highest bid.



        // TODO 3: if all requirement are satisfied, modify `winner`, `highestBid` and `bids`, last emit `Bid`


    }

    function withdraw() external {
        require(msg.sender != winner, "Highest bidder cannot withdraw.");

        //TODO 4: modify `bids` and transfer the value to the withdrawer, emit `Withdraw`



    }

    function end() external {

        // TODO 5: think of what `require`s this function need and emplement them, be sure to modify `ended` and emit `End` 



    }


    //-------- Below are judging functions ------------
    
    function setTimeToEnd() external {
      nowTime = endTime;
    }
    function getBiddersBid(address bidder) external view returns(uint256) {
      return bids[bidder];
    }

}