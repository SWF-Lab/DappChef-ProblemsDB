// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IERC165 {
    function supportsInterface(bytes4 interfaceID) external view returns (bool);
}

interface IERC721 is IERC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    function balanceOf(address owner) external view returns (uint256 balance);

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function transferFrom(address from, address to, uint256 tokenId) external;

    function approve(address to, uint256 tokenId) external;

    function setApprovalForAll(address operator, bool _approved) external;

    function getApproved(uint256 tokenId) external view returns (address operator);

    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

contract ERC721 is IERC721 {
  mapping(uint256 => address) internal _ownerOf;
  mapping(address => uint256) internal _balanceOf;
  mapping(uint => address) internal _approvals;
  mapping(address => mapping(address => bool)) public isApprovedForAll;

  function supportsInterface(bytes4 interfaceId) external pure returns (bool) {
    return
      interfaceId == type(IERC721).interfaceId ||
      interfaceId == type(IERC165).interfaceId;
  }

  function _mint(address to, uint256 id) internal {
        require(to != address(0), "mint to zero address");
        require(_ownerOf[id] == address(0), "already minted");

        _balanceOf[to]++;
        _ownerOf[id] = to;

        emit Transfer(address(0), to, id);
  }

  function ownerOf(uint256 id) external view returns (address owner) {
    owner = _ownerOf[id];
    require(owner != address(0), "token doesn't exist");
  }

  function balanceOf(address owner) external view returns (uint256) {
    require(owner != address(0), "owner = zero address");
    return _balanceOf[owner];
  }

  function approve(address spender, uint256 id) external {
      address owner = _ownerOf[id];
      require(
          msg.sender == owner || isApprovedForAll[owner][msg.sender],
          "not authorized"
      );
      _approvals[id] = spender;

      emit Approval(owner, spender, id);
  }

  function setApprovalForAll(address operator, bool approved) external {
    isApprovedForAll[msg.sender][operator] = approved;
    emit ApprovalForAll(msg.sender, operator, approved);
  }

  function getApproved(uint id) external view returns (address) {
      require(_ownerOf[id] != address(0), "token doesn't exist");
      return _approvals[id];
  }

  function _isApprovedOrOwner(
      address owner,
      address spender,
      uint id
    ) internal view returns (bool) {
        return (spender == owner ||
            isApprovedForAll[owner][spender] ||
            spender == _approvals[id]);
  }

  // write a function named `transferFrom`
  // it should transfer token if all requirement are satisfied
  // it should revert with "transfer to zero address" message if so
  // it should fire event `Transfer`



  // write a function named `_burn` taking one uint256 as param
  // It should burn token
  // it should revert with "not minted" if so
  // it should emit `Transfer` as it transfer token to zero address


}

contract answer20 is ERC721 {

  function mint(address to, uint256 id) external {
      _mint(to, id);
  }
  function burn(uint id) external {
    require(msg.sender == _ownerOf[id], "not owner");
    _burn(id);
  }
}

