// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract problem47 {
    mapping(address => uint256) public balance;

    receive() external payable {
        // TODO: when receive ether, add the balance of msg.sender with the accepting value
    }

    function deposit(address recipient) public payable {
        // TODO: when receive ether, add the balance of recipient with the accepting value
    }

    function getNowStake() public view returns (uint256) {
        return balance[msg.sender];
    }

    function withdraw(uint256 amount, address payable withdrawer) public {
        require(withdrawer == msg.sender);

        // TODO: when calling withdraw, minus the balance of withdrawer with the amount
        // TODO: and then transfer the amount of ether in wei to withdrawer
    }

    function withdraw(uint256 amount) public {

        // TODO: when calling withdraw, minus the balance of msg.sender with the amount
        // TODO: and then transfer the amount of ether in wei to msg.sender
    }
}