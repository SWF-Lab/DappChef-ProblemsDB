// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

// In this problem, we are going to write our ERC20 contract !

interface IERC20 {
  event Transfer(address indexed from, address indexed to, uint256 value);
  
  event Approval(address indexed owner, address indexed spender, uint256 value);
  
  function totalSupply() external view returns (uint256);
  
  function balanceOf(address account) external view returns (uint256);
  
  function transfer(address to, uint256 amount) external returns (bool);
  
  // ---------functions below are commented for compiling reasons.--------
  // function allowance(address owner, address spender) external view returns (uint256);
  
  // function approve(address spender, uint256 amount) external returns (bool);
  
  // function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// Finish the functions below, you can take a look at the interface if you find it difficult.
contract answer16 is IERC20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply = 100;
    address public owner;

    constructor() {
      owner = msg.sender;
      _balances[owner] = _totalSupply;
    }

    // Finish the `totalSupply` function, it should return the totalSupply of this ERC20 token.


    // Finish the `balanceOf` function, it should return the balance of an input address.


    // Finish the `transfer` function, it should transfer specific amount of ETH from the function called to another address and return true.
  
  
}


