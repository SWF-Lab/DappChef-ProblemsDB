// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// This is a Swap contract! It can swap one token to another, for simple, we only allow one way swap. 
// Exchange Token1 for Token2.
contract Token1 {
  uint256 public totalSupply = 300; 
  mapping(address => uint256) public balanceOf;
  constructor(address owner) {
    balanceOf[owner] = totalSupply;
  }
  function transferFrom(address from, address to, uint256 amount) external {
    balanceOf[from] -= amount;
    balanceOf[to] += amount;
  }
  function transfer(address to, uint256 amount) external {
    balanceOf[msg.sender] -= amount;
    balanceOf[to] += amount;
  }
}
contract Token2 {
  uint256 public totalSupply = 100; 
  mapping(address => uint256) public balanceOf;
  constructor(address owner) {
    balanceOf[owner] = totalSupply;
  }
  function transferFrom(address from, address to, uint256 amount) external {
    balanceOf[from] -= amount;
    balanceOf[to] += amount;
  }
  function transfer(address to, uint256 amount) external {
    balanceOf[msg.sender] -= amount;
    balanceOf[to] += amount;
  }
}

// The swap contract is here
contract answer58 {
    Token1 public token1Contract;
    Token2 public token2Contract;
    address public token1;
    address public token2;
    
    // `reserves` is a mapping that maps the reserves amount, for the reasons that many swap pairs may be added.
    // for example: reserves[token1][token2] means the token1 reserves in the token1/2 pair.
    mapping(address => mapping(address => uint256)) public reserves;

    // `deposits` record the one who deposit tokens to this contract for liquidity. 
    // We may want to give him some interest. To be simpler, we wont do that.
    mapping(address => mapping(address => mapping(address => uint256))) public deposits;

    // We make token1 and token2s totalSupply all yours!
    function init() external {
      token1Contract = new Token1(msg.sender);
      token2Contract = new Token2(msg.sender);
      token1 = address(token1Contract);
      token2 = address(token2Contract);
    }

    //============ TODOs are below this line =================
    function addReserves1(uint256 amount1) external {
        require(amount1 > 0, "Invalid reserve amount");
        // TODO1: transfer token1 to this contract, don't forget to modify `reserves` and `deposits`




    }

    function addReserves2(uint256 amount2) external {
        require(amount2 > 0, "Invalid reserve amount");
        //TODO2: do the same thing as TODO1




    }

    function removeReserves1(uint256 amount1) external {
        require(amount1 > 0, "Invalid reserve amount");
        require(deposits[token1][token2][msg.sender] >= amount1, "Insufficient deposits");
        //TODO3: transfer token1, don't forget to modify `reserves` and `deposits`



    }
    function removeReserves2(uint256 amount2) external {
        require(amount2 > 0, "Invalid reserve amount");
        require(deposits[token2][token1][msg.sender] >= amount2, "Insufficient deposits");
        
        //TODO4: do the same thing as TODO3


    }


    function exchange1for2(uint256 amount1) external {
        require(amount1 > 0, "amount1 < 0");
        require(reserves[token1][token2] > 0 && reserves[token2][token1] > 0, "Invalid token pair");

        // TODO5: If the total value of the reserved token1 and token2 are the same.
        // How should you calculate the amount of token2 to be swapped.
        // An example, if there is 10 token1 and 20 token2 reserved, then 1 token1 should be exchange with 2 token2.
        uint256 amount2 = 




        token1Contract.transferFrom(msg.sender, address(this), amount1);
        token2Contract.transfer(msg.sender, amount2);

        reserves[token1][token2] += amount1;
        reserves[token2][token1] -= amount2;
    }

    

    //============== TODOs are all above this line ============
    function getToken1Balance(address _addr) external view returns (uint256) {
      return token1Contract.balanceOf(_addr);
    }
    function getToken2Balance(address _addr) external view returns (uint256) {
      return token2Contract.balanceOf(_addr);
    }
    function getReserves1() external view returns(uint256) {
      return reserves[token1][token2];
    }
    function getReserves2() external view returns(uint256) {
      return reserves[token2][token1];
    }

}
